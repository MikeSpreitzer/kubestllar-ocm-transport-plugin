# Copyright 2024 The KubeStellar Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: transport-controller
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{.Values.wds_cp_name}}-transport-controller
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - tenancy.kflex.kubestellar.org
  resources:
  - controlplanes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - tenancy.kflex.kubestellar.org
  resources:
  - controlplanes/status
  verbs:
  - get
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{.Values.wds_cp_name}}-transport-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{.Values.wds_cp_name}}-transport-controller
subjects:
  - kind: ServiceAccount
    name: transport-controller
    namespace: {{.Release.Namespace}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: transport-controller-config
data:
  get-its-config.sh: |
    #!/bin/env bash
    its_name="${1%"-system"}" # ITS name or ITS namespace
    if [ "$its_name" = "" ] ; then
        for cp in `kubectl get controlplane -o name`; do
            cp=${cp##*/}
            if kubectl get controlplane $cp -o=jsonpath='{.metadata.labels}' | grep "imbs" &> /dev/null ; then
                if [ "$its_name" = "" ] ; then
                    its_name=$cp
                else
                    >&2 echo "ERROR: found more than one Control Plane of type imbs!"
                    exit 1
                fi
            fi
        done
        if [ "$its_name" = "" ] ; then
            >&2 echo "ERROR: no Control Plane of type imbs found!"
            exit 2
        fi
    fi
    key=$(kubectl get controlplane $its_name -o=jsonpath='{.status.secretRef.inClusterKey}')
    secret_name=$(kubectl get controlplane $its_name -o=jsonpath='{.status.secretRef.name}')
    secret_namespace=$(kubectl get controlplane $its_name -o=jsonpath='{.status.secretRef.namespace}')
    # get the kubeconfig in base64
    kubectl get secret $secret_name -n $secret_namespace -o=jsonpath="{.data.$key}"
  get-wds-config.sh: |
    #!/bin/env bash
    wds_name="${1%"-system"}" # WDS name or WDS namespace
    key=$(kubectl get controlplane $wds_name -o=jsonpath='{.status.secretRef.inClusterKey}')
    secret_name=$(kubectl get controlplane $wds_name -o=jsonpath='{.status.secretRef.name}')
    secret_namespace=$(kubectl get controlplane $wds_name -o=jsonpath='{.status.secretRef.namespace}')
    # get the kubeconfig in base64
    kubectl get secret $secret_name -n $secret_namespace -o=jsonpath="{.data.$key}"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: transport-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      name: transport-controller
  template:
    metadata:
      labels:
        name: transport-controller
    spec:
      serviceAccountName: transport-controller
      initContainers:
      - name: setup-wds-kubeconfig
        image: quay.io/kubestellar/kubectl:1.27.8
        imagePullPolicy: Always
        command: [ "bin/sh", "-c", "sh /mnt/config/get-wds-config.sh {{.Values.wds_cp_name}} | base64 -d > /mnt/shared/wds-kubeconfig"]
        volumeMounts:
        - name: config-volume
          mountPath: /mnt/config
        - name: shared-volume
          mountPath: /mnt/shared
      - name: setup-its-kubeconfig
        image: quay.io/kubestellar/kubectl:1.27.8
        imagePullPolicy: Always
        command: [ "bin/sh", "-c", "sh /mnt/config/get-its-config.sh {{.Values.transport_cp_name}} | base64 -d > /mnt/shared/transport-kubeconfig"]
        volumeMounts:
        - name: config-volume
          mountPath: /mnt/config
        - name: shared-volume
          mountPath: /mnt/shared
      containers:
        - name: transport-controller
          image: OTP_IMAGE_PLACEHOLDER
          imagePullPolicy: IfNotPresent
          args:
          - --transport-kubeconfig=/mnt/shared/transport-kubeconfig
          - --wds-kubeconfig=/mnt/shared/wds-kubeconfig
          - --wds-name={{.Values.wds_cp_name}}
          - -v=4
          volumeMounts:
          - name: shared-volume
            mountPath: /mnt/shared
            readOnly: true
      volumes:
      - name: shared-volume
        emptyDir: {}
      - name: config-volume
        configMap:
          name: transport-controller-config
          defaultMode: 0744
